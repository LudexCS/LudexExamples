// This automation is generated by ChatGPT 4o

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

const scenarioName = process.argv[2];

if (!scenarioName) {
  console.error('❌ 시나리오 이름을 입력하세요.');
  console.log('Usage: node scripts/init-scenario.js <scenario-name>');
  process.exit(1);
}

const baseDir = path.resolve(__dirname, '..', 'scenarios', scenarioName);
const srcDir = path.join(baseDir, 'src');
const publicDir = path.join(srcDir, 'public');

console.log(`📦 Creating scenario: ${scenarioName}`);

fs.mkdirSync(publicDir, { recursive: true });
process.chdir(baseDir);

// Step 1: npm init
execSync('npm init -y', { stdio: 'ignore' });

// Step 2: create tsconfig.json
execSync('npx tsc --init', { stdio: 'ignore' });

// Step 3: patch tsconfig.json
const tsconfigPath = path.join(baseDir, 'tsconfig.json');
let tsconfig = fs.readFileSync(tsconfigPath, 'utf8');

tsconfig = tsconfig
  .replace(/\/\/\s*"rootDir": ".\/",?/, `"rootDir": "./src",`)
  .replace(/\/\/\s*"outDir": ".\/",?/, `"outDir": "./dist",`)
  .replace(/\/\/\s*"esModuleInterop": false,?/, `"esModuleInterop": true,`)
  .replace(/\/\/\s*"strict": true,?/, `"strict": true,`)
  .replace(/\/\/\s*"skipLibCheck": true,?/, `"skipLibCheck": true,`);

fs.writeFileSync(tsconfigPath, tsconfig);

// Step 4: create src/index.ts
const indexTs = `
import express from 'express';
import path from 'path';

const app = express();
const port = 3000;

app.use(express.static(path.join(__dirname, 'public')));

app.get('/api/trigger', (_req, res) => {
  res.json({ message: 'Triggered from backend!' });
});

app.listen(port, () => {
  console.log(\`[✓] ${scenarioName} server running at http://localhost:\${port}\`);
});
`.trimStart();

fs.writeFileSync(path.join(srcDir, 'index.ts'), indexTs);

// Step 5: create public/index.html
const html = `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Scenario: ${scenarioName}</title>
</head>
<body>
  <h1>Scenario: ${scenarioName}</h1>
  <button id="trigger">Run Scenario</button>
  <pre id="result"></pre>

  <script>
    document.getElementById('trigger').addEventListener('click', async () => {
      try {
        const res = await fetch('/api/trigger');
        const data = await res.json();
        document.getElementById('result').textContent = JSON.stringify(data, null, 2);
      } catch (err) {
        document.getElementById('result').textContent = '⚠️ Error: ' + err;
      }
    });
  </script>
</body>
</html>
`.trimStart();

fs.writeFileSync(path.join(publicDir, 'index.html'), html);

// Step 6: add npm scripts
execSync('npx npm pkg set scripts.start="ts-node src/index.ts"', { stdio: 'ignore' });
execSync('npx npm pkg set scripts.dev="nodemon src/index.ts"', { stdio: 'ignore' });

// Step 7: add ludex dependency (local path)
execSync('npx npm pkg set dependencies.ludex="file:../../packages/LudexWeb3Integration"', {
  stdio: 'ignore'
});

console.log(`✅ ${scenarioName} 시나리오 생성 완료!`);
