// This automation is generated by ChatGPT 4o
const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

const scenarioName = process.argv[2];
if (!scenarioName) {
  console.error('❌ 시나리오 이름을 입력하세요.');
  console.log('Usage: node scripts/init-scenario.js <scenario-name>');
  process.exit(1);
}

const baseDir = path.resolve(__dirname, '..', 'scenarios', scenarioName);
const srcDir = path.join(baseDir, 'src');
const frontendDir = path.join(srcDir, 'frontend');

console.log(`📦 Creating scenario: ${scenarioName}`);
fs.mkdirSync(frontendDir, { recursive: true });
process.chdir(baseDir);

// 초기화 및 tsconfig 생성
execSync('npm init -y', { stdio: 'ignore' });
execSync('npx tsc --init', { stdio: 'ignore' });

const tsconfig = {
  compilerOptions: {
    target: "ES2020",
    module: "CommonJS",
    rootDir: "./src",
    outDir: "./dist",
    esModuleInterop: true,
    strict: true,
    skipLibCheck: true,
    typeRoots: ["./node_modules/@types"]
  }
};
fs.writeFileSync(path.join(baseDir, 'tsconfig.json'), JSON.stringify(tsconfig, null, 2));

// 서버 index.ts
fs.writeFileSync(path.join(srcDir, 'index.ts'), [
  'import express, { Request, Response } from "express";',
  'import path from "path";',
  '',
  'const app = express();',
  'const port = 4000;',
  '',
  'app.use(express.static(path.join(__dirname, "public")));',
  '',
  'app.get("/api/trigger", (_req: Request, res: Response) => {',
  '  res.json({ message: "Triggered from backend!" });',
  '});',
  '',
  'app.listen(port, () => {',
  '  console.log(`Server running at http://localhost:${port}`);',
  '});'
].join('\n'));

// frontend.ts
fs.writeFileSync(path.join(frontendDir, 'frontend.ts'), [
  'document.getElementById("trigger")?.addEventListener("click", async () => {',
  '  try {',
  '    const res = await fetch("/api/trigger");',
  '    const data = await res.json();',
  '    document.getElementById("result")!.textContent = JSON.stringify(data, null, 2);',
  '  } catch (err) {',
  '    document.getElementById("result")!.textContent = "⚠️ Error: " + err;',
  '  }',
  '});'
].join('\n'));

// index.html
fs.writeFileSync(path.join(frontendDir, 'index.html'), [
  '<!DOCTYPE html>',
  '<html lang="en">',
  '<head>',
  '  <meta charset="UTF-8" />',
  `  <title>Scenario: ${scenarioName}</title>`,
  '</head>',
  '<body>',
  `  <h1>Scenario: ${scenarioName}</h1>`,
  '  <button id="trigger">Run Scenario</button>',
  '  <pre id="result"></pre>',
  '',
  '  <script src="js/frontend.js"></script>',
  '</body>',
  '</html>'
].join('\n'));

// npm scripts 설정
execSync(`npx npm pkg set scripts.build="tsc && npm run copy-public && npm run build-frontend && npm run clean-frontend"`);
execSync(`npx npm pkg set scripts.copy-public="cpx src/frontend/index.html dist/public"`);
execSync(`npx npm pkg set scripts.build-frontend="esbuild src/frontend/frontend.ts --bundle --outfile=dist/public/js/frontend.js --format=iife"`);
execSync(`npx npm pkg set scripts.clean-frontend="rimraf dist/frontend"`);
execSync(`npx npm pkg set scripts.start="node dist/index.js"`);
execSync(`npx npm pkg set dependencies.ludex="file:../../packages/LudexWeb3Integration"`);

// devDependencies 설치
execSync(`npm install -D @types/node undici-types cpx rimraf esbuild`, { stdio: 'inherit' });

// 루트 package.json에 스크립트 등록
const rootPkgPath = path.resolve(__dirname, '..', 'package.json');
const rootPkg = JSON.parse(fs.readFileSync(rootPkgPath, 'utf8'));
rootPkg.scripts = rootPkg.scripts || {};
rootPkg.scripts[`start:${scenarioName}`] = `npm start --workspace=scenarios/${scenarioName}`;
rootPkg.scripts[`build:${scenarioName}`] = `npm run build --workspace=scenarios/${scenarioName}`;
fs.writeFileSync(rootPkgPath, JSON.stringify(rootPkg, null, 2));

// 완료 메시지
console.log(`✅ ${scenarioName} 시나리오 생성 완료!`);
console.log(`💡 Build: npm run build:${scenarioName}`);
console.log(`🚀 Run  : npm run start:${scenarioName}`);
